{"code":"/**\r\n * A sentinel value that signals that a value was handled by a directive and\r\n * should not be written to the DOM.\r\n */\r\nexport const noChange = {};\r\n/**\r\n * A sentinel value that signals a NodePart to fully clear its content.\r\n */\r\nexport const nothing = {};\r\n","references":[],"dts":{"name":"C:/Users/Administrator/Desktop/lit-html/node_modules/.cache/rollup-plugin-typescript2/placeholder/lit-html/interface/part.d.ts","writeByteOrderMark":false,"text":"export interface Part {\r\n    readonly value: unknown;\r\n    /**\r\n     * Sets the current part value, but does not write it to the DOM.\r\n     * @param value The value that will be committed.\r\n     */\r\n    setValue(value: unknown): void;\r\n    /**\r\n     * Commits the current part value, causing it to actually be written to the\r\n     * DOM.\r\n     *\r\n     * Directives are run at the start of `commit`, so that if they call\r\n     * `part.setValue(...)` synchronously that value will be used in the current\r\n     * commit, and there's no need to call `part.commit()` within the directive.\r\n     * If directives set a part value asynchronously, then they must call\r\n     * `part.commit()` manually.\r\n     */\r\n    commit(): void;\r\n}\r\n/**\r\n * A sentinel value that signals that a value was handled by a directive and\r\n * should not be written to the DOM.\r\n */\r\nexport declare const noChange: {};\r\n/**\r\n * A sentinel value that signals a NodePart to fully clear its content.\r\n */\r\nexport declare const nothing: {};\r\n"}}
