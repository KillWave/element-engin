{"code":"/**\r\n * @license\r\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at\r\n * http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at\r\n * http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at\r\n * http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at\r\n * http://polymer.github.io/PATENTS.txt\r\n */\r\nimport { removeNodes } from './dom.js';\r\nimport { NodePart } from './parts.js';\r\nimport { templateFactory } from './template-factory.js';\r\nexport const parts = new WeakMap();\r\n/**\r\n * Renders a template result or other value to a container.\r\n *\r\n * To update a container with new values, reevaluate the template literal and\r\n * call `render` with the new result.\r\n *\r\n * @param result Any value renderable by NodePart - typically a TemplateResult\r\n *     created by evaluating a template tag like `html` or `svg`.\r\n * @param container A DOM parent to render to. The entire contents are either\r\n *     replaced, or efficiently updated if the same result type was previous\r\n *     rendered there.\r\n * @param options RenderOptions for the entire render tree rendered to this\r\n *     container. Render options must *not* change between renders to the same\r\n *     container, as those changes will not effect previously rendered DOM.\r\n */\r\nexport const render = (result, container, options) => {\r\n    let part = parts.get(container);\r\n    if (part === undefined) {\r\n        removeNodes(container, container.firstChild);\r\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\r\n        part.appendInto(container);\r\n    }\r\n    part.setValue(result);\r\n    part.commit();\r\n};\r\n","references":["C:/Users/Administrator/Desktop/lit-html/src/dom.ts","C:/Users/Administrator/Desktop/lit-html/src/parts.ts","C:/Users/Administrator/Desktop/lit-html/src/render-options.ts","C:/Users/Administrator/Desktop/lit-html/src/template-factory.ts"],"dts":{"name":"C:/Users/Administrator/Desktop/lit-html/node_modules/.cache/rollup-plugin-typescript2/placeholder/render.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at\r\n * http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at\r\n * http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at\r\n * http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at\r\n * http://polymer.github.io/PATENTS.txt\r\n */\r\nimport { NodePart } from './parts.js';\r\nimport { RenderOptions } from './render-options.js';\r\nexport declare const parts: WeakMap<Node, NodePart>;\r\n/**\r\n * Renders a template result or other value to a container.\r\n *\r\n * To update a container with new values, reevaluate the template literal and\r\n * call `render` with the new result.\r\n *\r\n * @param result Any value renderable by NodePart - typically a TemplateResult\r\n *     created by evaluating a template tag like `html` or `svg`.\r\n * @param container A DOM parent to render to. The entire contents are either\r\n *     replaced, or efficiently updated if the same result type was previous\r\n *     rendered there.\r\n * @param options RenderOptions for the entire render tree rendered to this\r\n *     container. Render options must *not* change between renders to the same\r\n *     container, as those changes will not effect previously rendered DOM.\r\n */\r\nexport declare const render: (result: unknown, container: Element | DocumentFragment, options?: Partial<RenderOptions>) => void;\r\n"}}
