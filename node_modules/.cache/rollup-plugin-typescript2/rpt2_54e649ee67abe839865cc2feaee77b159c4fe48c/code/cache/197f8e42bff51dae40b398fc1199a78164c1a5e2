{"code":"/**\r\n * @license\r\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at\r\n * http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at\r\n * http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at\r\n * http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at\r\n * http://polymer.github.io/PATENTS.txt\r\n */\r\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\r\n/**\r\n * Creates Parts when a template is instantiated.\r\n */\r\nexport class DefaultTemplateProcessor {\r\n    /**\r\n     * Create parts for an attribute-position binding, given the event, attribute\r\n     * name, and string literals.\r\n     *\r\n     * @param element The element containing the binding\r\n     * @param name  The attribute name\r\n     * @param strings The string literals. There are always at least two strings,\r\n     *   event for fully-controlled bindings with a single expression.\r\n     */\r\n    handleAttributeExpressions(element, name, strings, options) {\r\n        const prefix = name[0];\r\n        if (prefix === '.') {\r\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\r\n            return committer.parts;\r\n        }\r\n        if (prefix === '@') {\r\n            return [new EventPart(element, name.slice(1), options.eventContext)];\r\n        }\r\n        if (prefix === '?') {\r\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\r\n        }\r\n        const committer = new AttributeCommitter(element, name, strings);\r\n        return committer.parts;\r\n    }\r\n    /**\r\n     * Create parts for a text-position binding.\r\n     * @param templateFactory\r\n     */\r\n    handleTextExpression(options) {\r\n        return new NodePart(options);\r\n    }\r\n}\r\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\r\n","references":["C:/Users/Administrator/Desktop/lit-html/src/interface/part.ts","C:/Users/Administrator/Desktop/lit-html/src/parts.ts","C:/Users/Administrator/Desktop/lit-html/src/render-options.ts","C:/Users/Administrator/Desktop/lit-html/src/template-processor.ts"],"dts":{"name":"C:/Users/Administrator/Desktop/lit-html/node_modules/.cache/rollup-plugin-typescript2/placeholder/default-template-processor.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at\r\n * http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at\r\n * http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at\r\n * http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at\r\n * http://polymer.github.io/PATENTS.txt\r\n */\r\nimport { Part } from './interface/part.js';\r\nimport { NodePart } from './parts.js';\r\nimport { RenderOptions } from './render-options.js';\r\nimport { TemplateProcessor } from './template-processor.js';\r\n/**\r\n * Creates Parts when a template is instantiated.\r\n */\r\nexport declare class DefaultTemplateProcessor implements TemplateProcessor {\r\n    /**\r\n     * Create parts for an attribute-position binding, given the event, attribute\r\n     * name, and string literals.\r\n     *\r\n     * @param element The element containing the binding\r\n     * @param name  The attribute name\r\n     * @param strings The string literals. There are always at least two strings,\r\n     *   event for fully-controlled bindings with a single expression.\r\n     */\r\n    handleAttributeExpressions(element: Element, name: string, strings: string[], options: RenderOptions): ReadonlyArray<Part>;\r\n    /**\r\n     * Create parts for a text-position binding.\r\n     * @param templateFactory\r\n     */\r\n    handleTextExpression(options: RenderOptions): NodePart;\r\n}\r\nexport declare const defaultTemplateProcessor: DefaultTemplateProcessor;\r\n"}}
