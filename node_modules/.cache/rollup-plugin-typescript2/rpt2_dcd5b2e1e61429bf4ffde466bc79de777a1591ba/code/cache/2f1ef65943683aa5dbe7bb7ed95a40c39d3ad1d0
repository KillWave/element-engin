{"code":"/**\r\n * @license\r\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at\r\n * http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at\r\n * http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at\r\n * http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at\r\n * http://polymer.github.io/PATENTS.txt\r\n */\r\n/**\r\n * True if the custom elements polyfill is in use.\r\n */\r\nexport const isCEPolyfill = typeof window !== 'undefined' &&\r\n    window.customElements != null &&\r\n    window.customElements.polyfillWrapFlushCallback !==\r\n        undefined;\r\n/**\r\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\r\n * into another container (could be the same container), before `before`. If\r\n * `before` is null, it appends the nodes to the container.\r\n */\r\nexport const reparentNodes = (container, start, end = null, before = null) => {\r\n    while (start !== end) {\r\n        const n = start.nextSibling;\r\n        container.insertBefore(start, before);\r\n        start = n;\r\n    }\r\n};\r\n/**\r\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\r\n * `container`.\r\n */\r\nexport const removeNodes = (container, start, end = null) => {\r\n    while (start !== end) {\r\n        const n = start.nextSibling;\r\n        container.removeChild(start);\r\n        start = n;\r\n    }\r\n};\r\n","references":[],"dts":{"name":"C:/Users/Administrator/Desktop/lit-html/node_modules/.cache/rollup-plugin-typescript2/placeholder/html-engin/dom.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at\r\n * http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at\r\n * http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at\r\n * http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at\r\n * http://polymer.github.io/PATENTS.txt\r\n */\r\n/**\r\n * True if the custom elements polyfill is in use.\r\n */\r\nexport declare const isCEPolyfill: boolean;\r\n/**\r\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\r\n * into another container (could be the same container), before `before`. If\r\n * `before` is null, it appends the nodes to the container.\r\n */\r\nexport declare const reparentNodes: (container: Node, start: Node | null, end?: Node | null, before?: Node | null) => void;\r\n/**\r\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\r\n * `container`.\r\n */\r\nexport declare const removeNodes: (container: Node, start: Node | null, end?: Node | null) => void;\r\n"}}
