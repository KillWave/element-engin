{"code":"import { html } from './html-engin';\r\nimport { render } from './html-engin/render';\r\n// createdCallback\r\n// 自定义元素注册后，在实例化之后会调用，通常多用于做元素的初始化，如插入子元素，绑定事件等。\r\n// attachedCallback\r\n// 元素插入到 document 时触发。\r\n// detachedCallback\r\n// 元素从 document 中移除时触发，可能会用于做类似 destroy 之类的事情。\r\n// attributeChangedCallback\r\n// 元素属性变化时触发，可以用于从外到内的通信。外部通过修改元素的属性来让内部获取相关的数据并且执行对应的操作。\r\nexport default class litElement extends HTMLElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.root = this.attachShadow({ mode: 'closed' });\r\n        this.props = [];\r\n    }\r\n    getProps() {\r\n        this.props.forEach((prop) => {\r\n            this[prop] = this.getAttribute(prop);\r\n        });\r\n    }\r\n    created() { }\r\n    destroy() { }\r\n    mounted() { }\r\n    disconnectedCallback() {\r\n        this.destroy();\r\n    }\r\n    attributeChangedCallback() {\r\n        this.getProps();\r\n        render(this.render(), this.root);\r\n    }\r\n    subscribe() {\r\n        var observer = new MutationObserver(function (mutations, observer) {\r\n            mutations.forEach(function (mutation) {\r\n                console.log(mutation);\r\n            });\r\n        });\r\n        observer.observe(this.root, {\r\n            attributes: true,\r\n            characterData: true,\r\n            childList: true,\r\n            subtree: true,\r\n            attributeOldValue: true,\r\n            characterDataOldValue: true\r\n        });\r\n        for (const key in this) {\r\n            if (Object.prototype.hasOwnProperty.call(this, key)) {\r\n                if (key != 'root') {\r\n                    let element = this[key];\r\n                    Object.defineProperty(this, key, {\r\n                        get() {\r\n                            return element;\r\n                        },\r\n                        set(val) {\r\n                            element = val;\r\n                            // this.watch[key](element, val);\r\n                            render(this.render(), this.root);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    connectedCallback() {\r\n        this.getProps();\r\n        this.subscribe();\r\n        this.created();\r\n        render(this.render(), this.root);\r\n        this.mounted();\r\n    }\r\n}\r\nlitElement.html = html;\r\n","references":["C:/Users/Administrator/Desktop/lit-html/src/html-engin/index.ts","C:/Users/Administrator/Desktop/lit-html/src/html-engin/render.ts","C:/Users/Administrator/Desktop/lit-html/src/html-engin/template-result.ts"],"dts":{"name":"C:/Users/Administrator/Desktop/lit-html/node_modules/.cache/rollup-plugin-typescript2/placeholder/lit-Element.d.ts","writeByteOrderMark":false,"text":"import { TemplateResult } from './html-engin/template-result';\r\nexport default abstract class litElement extends HTMLElement {\r\n    static html: (strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult;\r\n    readonly root: ShadowRoot;\r\n    watch: Object;\r\n    private props;\r\n    abstract render(): TemplateResult;\r\n    private getProps;\r\n    created(): void;\r\n    destroy(): void;\r\n    mounted(): void;\r\n    disconnectedCallback(): void;\r\n    attributeChangedCallback(): void;\r\n    private subscribe;\r\n    connectedCallback(): void;\r\n}\r\n"}}
